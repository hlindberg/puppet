require 'puppet/application'
require 'puppet/configurer'
require 'puppet/util/profiler/aggregate'
require 'puppet/parser/script_compiler'
require 'puppet/fix'

class Puppet::Application::Fix < Puppet::Application

  option("--debug","-d")

  option("--issue ISSUE", "-i") do |arg|
    options[:issue] = the_issue = Puppet::Fix::FixController.parse_issue(arg)
    unless the_issue.mnemonic && the_issue.section
      raise "Given issue must reference a benchmark and contain the section"
    end
  end

  option("--plan NAME", "-p") do |arg|
    options[:plan_name] = arg
  end

  option("--file FILE", "-f") do |arg|
    options[:issues_file] = arg
  end

#  option("--test","-t")
#  option("--verbose","-v")

  option("--logdest LOGDEST", "-l") do |arg|
    handle_logdest_arg(arg)
  end

  def summary
    _("Produces remediation fixes for issues found when scanning for vulnerabilities")
  end

  def help
    <<-HELP

puppet-fix(8) -- #{summary}
========

SYNOPSIS
--------
  Produces remediation fixes for issues found when scanning for benchmark compliance, or vulnerabilities


USAGE
-----
puppet fix [-h|--help] [-V|--version] [-d|--debug]
  [-i|--issue] [-if|--issues_file]
  [-v|--version]
  [-p|--plan]
  [-l|--logdest syslog|eventlog|<FILE>|console] [--noop]
  <file>


DESCRIPTION
-----------
Puppet fix can produce remediation fixes for known found (or explicitly given) issues, such as
benchmark "controls", or "vulnerabilities".

# TBD: When provided with a modulepath, via command line or config file, Puppet
# Fix can load remediation fixes, functions, types, tasks and plans from modules.

Currently it offers output of instructions how to run an available fix given the id
of an issue (i.e. benchmark, vulnerability, issue).

Issues are mapped to fixes via hiera. Each module should bind its provided fixes
to a key '<mymodule>::fix::fixmap', where '<mymodule>' is the name of the module.
The bound value shoud be a hash with issue-id key and fix-id value.

The key 'fix::include_modules' should be bound to an array of module names from which fixes
should be included - it is looked up with unique merge.
This allows the configuration to differ depending on operating system.

An environment level 'fix::fixmap' is looked up and is deeply merge with higher priority
than any of the fixmaps found in modules. This allows the configuration to use fixes
from modules not containing fixmaps.

Benchmark ID
------------
A fully qualified issue is something like:

xccdf_org.cisecurity.benchmarks_benchmark_2.2.0.1_CIS_Red_Hat_Enterprise_Linux_7_Benchmark/1.1.1.1_Ensure_mounting_of_cramfs_filesystem_is_disabled

Which is a horribly long thing to work with on the command line, and to use to switch between data sets in hiera.
When feeding a result from a scan, these identifiers are obtained from the result file. For command line work it is possible to provide
short-form names that are read from a configuration file.

Benchmark identifiers also needs to be mapped to canonical values to be used in hiera as standardized by Facter facts.

---
benchmarks:
  - 
    benchmark:
      id: "xccdf_org.cisecurity.benchmarks_benchmark_2.2.0.1_CIS_Red_Hat_Enterprise_Linux_7_Benchmark"  version: "2.2.0.1"
      name: "cis-rhel7"
      family: "cis"
    facts: {
      os:
        name: "RedHat"
        family: "RedHat"
        release:
          full: "7.2.1511"
          major: "7"
          minor: "2"

  - benchmark:
      id: "xccdf_org.cisecurity.benchmarks_benchmark_2.2.0.1_CIS_Red_Hat_Enterprise_Linux_8_Benchmark"
      name: "cis-rhel8"
      # rest as for rhel7


This makes it possible to identify benchmarks as 'cis-rhel7', 'cis-rhel8', etc. and also provides the variable values for switching
data sets and mappings in hiera. The setting 'default_benchmark' makes it possible to just give the name of the benchmark check/rule.

OPTIONS
-------
* --issue, -i
  The single issue for which some action is wanted. It is given on the form <mnemonic>::<section><name>.
  Mutually exclusive with --issues_file.

* --issues_file, -if
  A yaml file with none/one or more issues for which some action is wanted.
  Mutually exclusive with --issue.

* --version:
  The version of the benchmark for which the given --benchmark is a reference into.

* --plan
  The name of the plan. Defaults to `generated_plan`

Note that any setting that's valid in the configuration
file is also a valid long argument. For example, 'environment' is a
valid setting, so you can specify '--environment mytest'
as an argument.

See the configuration file documentation at
https://puppet.com/docs/puppet/latest/configuration.html for the
full list of acceptable parameters. A commented list of all
configuration options can also be generated by running puppet with
'--genconfig'.

* --debug:
  Enable full debugging.

* --help:
  Print this help message

* --logdest:
  Where to send log messages. Choose between 'syslog' (the POSIX syslog
  service), 'eventlog' (the Windows Event Log), 'console', or the path to a log
  file. Defaults to 'console'.

  A path ending with '.json' will receive structured output in JSON format. The
  log file will not have an ending ']' automatically written to it due to the
  appending nature of logging. It must be appended manually to make the content
  valid JSON.

  A path ending with '.jsonl' will receive structured output in JSON Lines
  format.

EXAMPLES
--------
    $ puppet fix -i cis-rhel7:/1.1.1.1_Ensure_mounting_of_cramfs_filesysten_is_disabled
    $ puppet fix -i cis-rhel7:/1.1.1.1

AUTHOR
------
Henrik Lindberg


COPYRIGHT
---------
Copyright (c) 2019 Puppet Inc., LLC Licensed under the Apache 2.0 License (??)

HELP
  end

  def run_command
    # For now, just call main
    main
  end

  def main
    # The tasks feature is always on
    Puppet[:tasks] = true

    controller = Puppet::Fix::FixController.new

    # only pass options the controller understands
    controller_options = options.select {|k,_| [
        :issue,
        :issues_file,
        :plan_name
      ].include?(k) }

    controller.run(**controller_options)

    # Stop here for now
    return

#    # Set the puppet code or file to use.
#    if options[:code] || command_line.args.length == 0
#      Puppet[:code] = options[:code] || STDIN.read
#    else
#      manifest = command_line.args.shift
#      raise _("Could not find file %{manifest}") % { manifest: manifest } unless Puppet::FileSystem.exist?(manifest)
#      Puppet.warning(_("Only one file can be used per run. Skipping %{files}") % { files: command_line.args.join(', ') }) if command_line.args.size > 0
#    end
#
#    unless Puppet[:node_name_fact].empty?
#      # Collect the facts specified for that node
#      unless facts = Puppet::Node::Facts.indirection.find(Puppet[:node_name_value])
#        raise _("Could not find facts for %{node}") % { node: Puppet[:node_name_value] }
#      end
#
#      Puppet[:node_name_value] = facts.values[Puppet[:node_name_fact]]
#      facts.name = Puppet[:node_name_value]
#    end
#
#    # Find the Node
#    unless node = Puppet::Node.indirection.find(Puppet[:node_name_value])
#      raise _("Could not find node %{node}") % { node: Puppet[:node_name_value] }
#    end
#
#    configured_environment = node.environment || Puppet.lookup(:current_environment)
#
#    apply_environment = manifest ?
#      configured_environment.override_with(:manifest => manifest) :
#      configured_environment
#
#    # Modify the node descriptor to use the special apply_environment.
#    # It is based on the actual environment from the node, or the locally
#    # configured environment if the node does not specify one.
#    # If a manifest file is passed on the command line, it overrides
#    # the :manifest setting of the apply_environment.
#    node.environment = apply_environment
#
#    # TRANSLATION, the string "For puppet script" is not user facing
#    Puppet.override({:current_environment => apply_environment}, "For puppet script") do
#      # Merge in the facts.
#      node.merge(facts.values) if facts
#
#      # Add server facts so $server_facts[environment] exists when doing a puppet script
#      # SCRIPT TODO: May be needed when running scripts under orchestrator. Leave it for now.
#      #
#      node.add_server_facts({})
#
#      begin
#        # Compile the catalog
#
#        # When compiling, the compiler traps and logs certain errors
#        # Those that do not lead to an immediate exit are caught by the general
#        # rule and gets logged.
#        #
#        begin
#          # support the following features when evaluating puppet code
#          # * $facts with facts from host running the script
#          # * $settings with 'settings::*' namespace populated, and '$settings::all_local' hash
#          # * $trusted as setup when using puppet apply
#          # * an environment
#          #
#
#          # fixup trusted information
#          node.sanitize()
#
#          compiler = Puppet::Parser::ScriptCompiler.new(node.environment, node.name)
#          topscope = compiler.topscope
#
#          # When scripting the trusted data are always local, but set them anyway
#          topscope.set_trusted(node.trusted_data)
#
#          # Server facts are always about the local node's version etc.
#          topscope.set_server_facts(node.server_facts)
#
#          # Set $facts for the node running the script
#          facts_hash = node.facts.nil? ? {} : node.facts.values
#          topscope.set_facts(facts_hash)
#
#          # create the $settings:: variables
#          topscope.merge_settings(node.environment.name, false)
#
#          compiler.compile()
#
#        rescue Puppet::ParseErrorWithIssue, Puppet::Error
#          # already logged and handled by the compiler for these two cases
#          exit(1)
#        end
#
#        exit(0)
#      rescue => detail
#        Puppet.log_exception(detail)
#        exit(1)
#      end
#    end

  ensure
    if @profiler
      Puppet::Util::Profiler.remove_profiler(@profiler)
      @profiler.shutdown
    end
  end

  def setup
    # TODO: Should read and print its own configuration (in addition to puppet's)
    # exit(Puppet.settings.print_configs ? 0 : 1) if Puppet.settings.print_configs?

    handle_logdest_arg(Puppet[:logdest])
    Puppet::Util::Log.newdestination(:console) unless options[:setdest]

    Signal.trap(:INT) do
      $stderr.puts _("Exiting")
      exit(1)
    end

    # When running a script, the catalog is not relevant, and neither is caching of it
    Puppet::Resource::Catalog.indirection.cache_class = nil

    set_log_level

    # Configure profiling... TODO: This may not be of value
    if Puppet[:profile]
      @profiler = Puppet::Util::Profiler.add_profiler(Puppet::Util::Profiler::Aggregate.new(Puppet.method(:info), "fix"))
    end
  end

end
